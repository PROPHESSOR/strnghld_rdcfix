#library "sthldcmn"
#include "zcommon.acs"

// Stronghold Common Script
// Autoloaded script to help items and other things work even on levels not using the main library.

global int 60:StartingCredits;
global int 61:BankCredits;

#define S_AWARD_WATCHER		940
//#define S_NIGHTMARE_ATTACK	941

script S_AWARD_WATCHER ENTER
{
    while (true)
    {
        int CoinsLimit = 100000; // how much the player can hold.
        int BankLimit = 1000000; // how much the bank can hold.
        int AwardAmount = CheckInventory("AwardItem");
        int coins = CheckInventory("CoinItem"); // starting value for awarding
        int actualcoins = 0; // leftovers

        if (AwardAmount > 0)
        {
            if ((coins + AwardAmount) > CoinsLimit)
            {
                if (coins < CoinsLimit)
                {
                    do
                    {
                        coins++;
                        actualcoins++;
                        AwardAmount--;
                    } until (coins == CoinsLimit);

                    if (actualcoins) { GiveInventory("CoinItem", actualcoins); }
                }

                if (BankCredits < BankLimit)
                {
                    BankCredits += AwardAmount;
                    if (BankCredits > BankLimit) { BankCredits = BankLimit; }
                }
            } else {
                GiveInventory("CoinItem", AwardAmount);
            }
            if (CheckInventory("AwardItem")) { TakeInventory("AwardItem", 0x7FFFFFFF); }
        }
        Delay(1);
    }
}

// Call with end = 0 at start of attack, end = 1 at end of attack
/*script S_NIGHTMARE_ATTACK (int end)
{
    PrintBold(s:"TODO: Implement NightmareDemon's attack");
}*/

script "StrInfiniteAmmoChecker" (void)
{
    SetResultValue(GetCVar("sv_infiniteammo") || CheckInventory("PowerInfiniteAmmo"));
}

script "StrSilentAlarmCVarChecker" (void)
{
    SetResultValue(GetUserCVar(ConsolePlayerNumber(), "stronghold_cl_turnthatdamnalarmoff"));
}

script "StrRWDWeaponNotifier" (int weapon)
{
    if (weapon == 1)
    {
        ACS_NamedExecuteWithResult("StrRWDSuperweaponNotifier", 1);
        Print(s:"Got a BFG9000! Oh, yes.");
    } else if (weapon == 2) {
        ACS_NamedExecuteWithResult("StrRWDSuperweaponNotifier", 2);
        Print(s:"Got a pyro cannon prototype!");
    } else if (weapon == 3) {
        ACS_NamedExecuteWithResult("StrRWDSuperweaponNotifier", 3);
        Print(s:"Got a devastator! Hell yeah!");
    } else if (weapon == 4) {
        Print(s:"Got a plasma repeater!");
    } else if (weapon == 5) {
        Print(s:"Got a flamethrower! Time for a BBQ!");
    } else if (weapon == 6) {
        Print(s:"Got a railgun!");
    } else if (weapon == 7) {
        Print(s:"Got a stunner rifle!");
    } else if (weapon == 8) {
        Print(s:"Got a plasma gun!");
    } else if (weapon == 9) {
        Print(s:"Got a rocket launcher!");
    } else if (weapon == 10) {
        Print(s:"Got a homing rocket launcher!");
    } else if (weapon == 11) {
        Print(s:"Got some land mines!");
    /*} else if (weapon == 12) {
        Print(s:"Got an automatic shotgun!");*/
    }
}

script "StrRWDSuperweaponNotifier" (int weapon)
{
    if (GameType() == GAME_NET_COOPERATIVE)
    {
        if (weapon == 1)
        {
            PrintBold(n:0, s:" got a BFG9000 from the random weapon device!");
        } else if (weapon == 2) {
            PrintBold(n:0, s:" got a pyro cannon prototype from the random weapon device!");
        } else if (weapon == 3) {
            PrintBold(n:0, s:" got a devastator from the random weapon device!");
        }
    }

    AmbientSound("rwd/superweapon", 127);
}

script "StrMorphTypeChecker" (void)
{
    SetResultValue(GetCVar("stronghold_bruisermorph"));
}

script "StrGreenArmorGiverEnter" ENTER { ACS_NamedExecuteWithResult("StrGreenArmorGiver", 0); } // Starting Armor
script "StrGreenArmorGiverReturn" RETURN { ACS_NamedExecuteWithResult("StrGreenArmorGiver", 0); }
script "StrGreenArmorGiverRespawn" RESPAWN { ACS_NamedExecuteWithResult("StrGreenArmorGiver", 0); } // Respawning Armor

script "StrGreenArmorGiver" (void)
{
    if (CheckInventory("BasicArmor") < 50) // Less than 50 armor
    {
        GiveInventory("GreenArmor", 1); // Restore Green Armor
    }
}

script "StrStaminaTokenTaker" DEATH // Apparently, RESPAWN doesn't trigger when map change?!
{
    if (CheckInventory("MaxHealthBonus2ShopToken"))
    {
        TakeInventory("MaxHealthBonus2ShopToken", 0x7FFFFFFF);
    }
}

script "StrHealthAndArmorPickupChecker" (int type, int amount)
{
    int check1, check2;

    if (type == 1)
    {
        check1 = amount + CheckInventory("MaxHealthBonus2ShopToken");
        check2 = GetActorProperty(0, APROP_Health);
    } else if (type == 2) {
        check1 = amount + CheckInventory("MaxArmorBonus2ShopToken");
        check2 = CheckInventory("BasicArmor");
    }

    if (check2 >= check1) { SetResultValue(1); } else { SetResultValue(0); }
}

script "StrMorphAttackMessagePrinter" (int morph, int attack)
{
    if (morph == 1)
    {
        if (attack == 1)
        {
            Print(s:"Blaster");
        } else if (attack == 2) {
            Print(s:"Super Chaingun");
        } else if (attack == 3) {
            Print(s:"Homing Energy Shots");
        } else if (attack == 4) {
            Print(s:"Decimation Missiles");
        }
    } else if (morph == 2) {
        if (attack == 1)
        {
            Print(s:"Large Fireballs");
        } else if (attack == 2) {
            Print(s:"Small Fireballs");
        } else if (attack == 3) {
            Print(s:"Fiery Spikes");
        }
    }
}

script "StrStartingCreditsInitialiser" OPEN
{
    int defaultamount = 800;

    if (StartingCredits < defaultamount) StartingCredits = defaultamount;
}

script "StrStartingCreditsGiver" (void)
{
    if (!CheckInventory("StrAlreadyGotCredits")) // Ensures players only get credits when joining and switching classes.
    {
        int defaultamount = 800;

        if (StartingCredits < defaultamount) { GiveInventory("CoinItem", defaultamount); }
        else { GiveInventory("CoinItem", StartingCredits); }

        GiveInventory("StrAlreadyGotCredits", 1);
    }
}

script "StrStartingCreditsGiverEnter" ENTER { ACS_NamedExecuteWithResult("StrStartingCreditsGiver", 0); }
script "StrStartingCreditsGiverReturn" RETURN { ACS_NamedExecuteWithResult("StrStartingCreditsGiver", 0); }
script "StrStartingCreditsGiverRespawn" RESPAWN { ACS_NamedExecuteWithResult("StrStartingCreditsGiver", 0); }

script "StrBankSystem" (int option) NET CLIENTSIDE
{
    Log(s:"This cannot be used right now.");
    LocalAmbientSound("bank/fail", 127);
}

script "StrJailMessagePrinter" (int message) CLIENTSIDE
{
    if (message == 1)
    {
        if (GameType() == GAME_NET_COOPERATIVE) { Log(n:0, s:" is out of lives!"); }
        AmbientSound("jail/playerin1", 127);
    } else if (message == 2) {
        if (GameType() == GAME_NET_COOPERATIVE) { Log(n:0, s:" is late to the game!"); }
        AmbientSound("jail/playerin2", 127);
    } else if (message == 3) {
        if (GameType() == GAME_NET_COOPERATIVE) { Log(n:0, s:" is now in the fray."); }
        AmbientSound("jail/playerout", 127);
    }
}

script "StrBackpackCooldown" (int time)
{
    if (GameType() == GAME_NET_COOPERATIVE)
    {
        GiveInventory("StrBackpackCooldownTimer", time);

        if (CheckInventory("StrBackpackCooldownTimer"))
        {
            do
            {
                Delay(35);
                TakeInventory("StrBackpackCooldownTimer", 1);
            } until (!CheckInventory("StrBackpackCooldownTimer"));
        }
    }
}

script "StrAutoDroneSpawnerRight" (int timelimit)
{
    until (timelimit <= 0)
    {
        timelimit--;
        GiveInventory("ForceCube2Right", 1);
        Delay(1);
    }

    TakeInventory("ForceCubeTimerRight", 0x7FFFFFFF);
}

script "StrAutoDroneSpawnerLeft" (int timelimit)
{
    until (timelimit <= 0)
    {
        timelimit--;
        GiveInventory("ForceCube2Left", 1);
        Delay(1);
    }

    TakeInventory("ForceCubeTimerLeft", 0x7FFFFFFF);
}

script "StrInfiniteLivesChecker" (void)
{
    SetResultValue(GetCVar("stronghold_infinitelives"));
}

script "StrBerserkFistSwitchHack" (void) { SetWeapon("DEFist"); } // A_SelectWeapon somehow doesn't work for whatever reason

script "StrBerserkSwitchCVarChecker" (void)
{
    SetResultValue(GetCVar("stronghold_cl_berserkswitch"));
}
